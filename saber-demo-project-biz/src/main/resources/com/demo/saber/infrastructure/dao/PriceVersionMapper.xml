<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.demo.saber.infrastructure.mapper.PriceVersionMapper">
    <resultMap id="BaseResultMap" type="com.demo.saber.infrastructure.po.PriceVersion">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="total" jdbcType="DECIMAL" property="total"/>
        <result column="front" jdbcType="DECIMAL" property="front"/>
        <result column="end" jdbcType="DECIMAL" property="end"/>
        <result column="version" jdbcType="INTEGER" property="version"/>
        <result column="add_time" jdbcType="TIMESTAMP" property="addTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, total, front, end, version, add_time, update_time
  </sql>
    <select id="selectByExample" parameterType="com.demo.saber.infrastructure.po.PriceVersionExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from price_version
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from price_version
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from price_version
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.demo.saber.infrastructure.po.PriceVersionExample">
        delete from price_version
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.demo.saber.infrastructure.po.PriceVersion">
    insert into price_version (id, total, front,
      end, version, add_time,
      update_time)
    values (#{id,jdbcType=INTEGER}, #{total,jdbcType=DECIMAL}, #{front,jdbcType=DECIMAL},
      #{end,jdbcType=DECIMAL}, #{version,jdbcType=INTEGER}, #{addTime,jdbcType=TIMESTAMP},
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
    <insert id="insertSelective" parameterType="com.demo.saber.infrastructure.po.PriceVersion">
        insert into price_version
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="total != null">
                total,
            </if>
            <if test="front != null">
                front,
            </if>
            <if test="end != null">
                end,
            </if>
            <if test="version != null">
                version,
            </if>
            <if test="addTime != null">
                add_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="total != null">
                #{total,jdbcType=DECIMAL},
            </if>
            <if test="front != null">
                #{front,jdbcType=DECIMAL},
            </if>
            <if test="end != null">
                #{end,jdbcType=DECIMAL},
            </if>
            <if test="version != null">
                #{version,jdbcType=INTEGER},
            </if>
            <if test="addTime != null">
                #{addTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.demo.saber.infrastructure.po.PriceVersionExample"
            resultType="java.lang.Long">
        select count(*) from price_version
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update price_version
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.total != null">
                total = #{record.total,jdbcType=DECIMAL},
            </if>
            <if test="record.front != null">
                front = #{record.front,jdbcType=DECIMAL},
            </if>
            <if test="record.end != null">
                end = #{record.end,jdbcType=DECIMAL},
            </if>
            <if test="record.version != null">
                version = #{record.version,jdbcType=INTEGER},
            </if>
            <if test="record.addTime != null">
                add_time = #{record.addTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update price_version
        set id = #{record.id,jdbcType=INTEGER},
        total = #{record.total,jdbcType=DECIMAL},
        front = #{record.front,jdbcType=DECIMAL},
        end = #{record.end,jdbcType=DECIMAL},
        version = #{record.version,jdbcType=INTEGER},
        add_time = #{record.addTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.demo.saber.infrastructure.po.PriceVersion">
        update price_version
        <set>
            <if test="total != null">
                total = #{total,jdbcType=DECIMAL},
            </if>
            <if test="front != null">
                front = #{front,jdbcType=DECIMAL},
            </if>
            <if test="end != null">
                end = #{end,jdbcType=DECIMAL},
            </if>
            <if test="version != null">
                version = #{version,jdbcType=INTEGER},
            </if>
            <if test="addTime != null">
                add_time = #{addTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.demo.saber.infrastructure.po.PriceVersion">
    update price_version
    set total = #{total,jdbcType=DECIMAL},
      front = #{front,jdbcType=DECIMAL},
      end = #{end,jdbcType=DECIMAL},
      version = #{version,jdbcType=INTEGER},
      add_time = #{addTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <update id="updateByVersion" parameterType="com.demo.saber.infrastructure.po.PriceVersion">
        update price_version
        set front = #{front, jdbcType=DECIMAL},
            version = version + 1
        where id = #{id, jdbcType=INTEGER}
        and version = #{version, jdbcType=INTEGER}
    </update>

    <insert id="batchInsertPriceVersions" useGeneratedKeys="true" keyProperty="id" parameterType="com.demo.saber.infrastructure.po.PriceVersion">
        insert into `price_version` (
         add_time,
         update_time,
         total,
         front,
         end,
         version
        ) values
        <foreach collection="list" item="item" index="index" separator=",">
            (
            now(),
            now(),
            #{item.total,jdbcType=DECIMAL},
            #{item.front,jdbcType=DECIMAL},
            #{item.end,jdbcType=DECIMAL},
            #{item.version,jdbcType=INTEGER}
          )
        </foreach>
    </insert>
</mapper>